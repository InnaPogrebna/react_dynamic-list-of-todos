{"version":3,"sources":["components/TodoList/TodoList.tsx","types/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","useState","searchTodo","setSearchTodo","selectFilter","setSelectFilter","visibleTodos","setVisibleTodos","useEffect","filter","todo","completed","filteredTodo","title","toLowerCase","includes","className","htmlFor","type","id","placeholder","value","onChange","event","target","name","defaultValue","onClick","sort","Math","random","map","checked","readOnly","userId","getData","endpoint","a","fetch","response","json","CurrentUser","getClear","selectedUser","setSelectedUser","then","data","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b52e6291.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../types/type';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId:(number: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectedUserId }) => {\n  const [searchTodo, setSearchTodo] = useState('');\n  const [selectFilter, setSelectFilter] = useState('All');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      switch (selectFilter) {\n        case 'All':\n          return todo;\n        case 'Active':\n          return !todo.completed;\n        case 'Completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    }));\n  }, [selectFilter, todos, searchTodo]);\n\n  const filteredTodo = visibleTodos.filter(todo => todo.title.toLowerCase()\n    .includes(searchTodo.toLowerCase()));\n\n  const handleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTodo(event.target.value);\n  };\n\n  const handleChangeSelect = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectFilter(event.target.value);\n  };\n\n  const Randomize = () => {\n    const temp = filteredTodo;\n\n    setVisibleTodos(temp.sort(() => Math.random() - 0.5));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"App__search\">\n        <label htmlFor=\"search-todo\" className=\"App__search-label\">\n          Search movie:\n        </label>\n        <input\n          type=\"text\"\n          id=\"search-todo\"\n          className=\"App__search-input\"\n          placeholder=\"Search\"\n          value={searchTodo}\n          onChange={handleChange}\n        />\n      </div>\n      <label htmlFor=\"selectFilterByOption\">\n        Select:&nbsp;\n        <select\n          name=\"select\"\n          id=\"selectFilterByOption\"\n          defaultValue=\"All\"\n          onChange={handleChangeSelect}\n        >\n          <option value=\"All\">All</option>\n          <option value=\"Active\">Active</option>\n          <option value=\"Completed\">Completed</option>\n        </select>\n      </label>\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={Randomize}\n      >\n        Randomize\n      </button>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodo.map(todo => (\n            <li\n              key={todo.id}\n              className={`TodoList__item\n                  ${todo.completed\n              ? 'TodoList__item--checked'\n              : 'TodoList__item--unchecked'}`}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                type=\"button\"\n                onClick={() => {\n                  selectedUserId(todo.userId);\n                }}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { User, Todo } from './type';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getData = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`);\n\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\n\nexport function getUserById(id: number): Promise<User> {\n  return getData(`/users/${id}`);\n}\n\nexport function getTodos(): Promise<Todo[]> {\n  return getData('/todos');\n}\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../types/type';\nimport { getUserById } from '../../types/api';\n\ntype Props = {\n  selectedUserId: number,\n  getClear: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  selectedUserId,\n  getClear,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    getUserById(selectedUserId)\n      .then(data => setSelectedUser(data));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {(!selectedUser)\n        ? 'Not found user'\n        : (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {selectedUserId}\n              </span>\n            </h2>\n            <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={getClear}\n            >\n              Clear\n            </button>\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './types/type';\nimport { getTodos } from './types/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => setTodos(data));\n  }, []);\n\n  const getClearUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={setSelectedUserId}\n        />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              getClear={getClearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}